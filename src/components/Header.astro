---
import { config } from "../config";

const { base = "" } = Astro.site
  ? { base: import.meta.env.BASE_URL }
  : { base: "" };
---

<header class="site-header">
  <div class="header-content">
    <!-- Mobile hamburger button -->
    <button
      class="hamburger-toggle mobile-only"
      id="hamburger-toggle"
      aria-label="Toggle navigation menu"
      aria-expanded="false"
    >
      <svg
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          class="hamburger-line"
          d="M3 6h18"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"></path>
        <path
          class="hamburger-line"
          d="M3 12h18"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"></path>
        <path
          class="hamburger-line"
          d="M3 18h18"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"></path>
      </svg>
    </button>

    <div class="site-title">
      <a href={base}>
        <h1>Alex Marcus</h1>
      </a>
    </div>

    <div class="header-controls">
      <nav
        class="main-navigation"
        role="navigation"
        aria-label="Main navigation"
      >
        <ul class="nav-list">
          {
            ["Home", "Profile", "Projects"].map((label, i) => {
              const paths = [
                base,
                base + "profile",
                base + "projects",
              ];
              const isActive =
                label === "Home"
                  ? Astro.url.pathname === paths[0]
                  : label === "Profile"
                    ? Astro.url.pathname === paths[1]
                    : Astro.url.pathname.startsWith(paths[i]);
              return (
                <li>
                  <a
                    href={paths[i]}
                    class={`nav-link${isActive ? " active" : ""}`}
                    aria-current={isActive ? "page" : undefined}
                  >
                    {label}
                  </a>
                </li>
              );
            })
          }
        </ul>
      </nav>
    </div>
  </div>
</header>

<nav class="mobile-menu" id="mobile-menu" aria-label="Mobile navigation">
  <ul class="mobile-nav-list">
    {
      ["Home", "Profile", "Projects"].map((label, i) => {
        const paths = [
          base,
          base + "profile",
          base + "projects",
        ];
        const isActive =
          label === "Home"
            ? Astro.url.pathname === paths[0]
            : label === "Profile"
              ? Astro.url.pathname === paths[1]
              : Astro.url.pathname.startsWith(paths[i]);
        return (
          <li>
            <a
              href={paths[i]}
              class={`mobile-nav-link${isActive ? " active" : ""}`}
              aria-current={isActive ? "page" : undefined}
            >
              {label}
            </a>
          </li>
        );
      })
    }
  </ul>
</nav>

<script>
  const base = `${import.meta.env.BASE_URL || ""}`;

  // Hamburger menu functionality
  function initHamburgerMenu() {
    const hamburgerToggle = document.getElementById("hamburger-toggle");
    const mobileMenu = document.getElementById("mobile-menu");
    const body = document.body;

    if (!hamburgerToggle || !mobileMenu) return;

    hamburgerToggle.addEventListener("click", () => {
      const isOpen = mobileMenu.classList.contains("active");

      if (isOpen) {
        mobileMenu.classList.remove("active");
        hamburgerToggle.setAttribute("aria-expanded", "false");
        body.style.overflow = "";
      } else {
        mobileMenu.classList.add("active");
        hamburgerToggle.setAttribute("aria-expanded", "true");
        body.style.overflow = "hidden";
      }
    });

    // Close menu when clicking on a link
    const mobileNavLinks = mobileMenu.querySelectorAll(".mobile-nav-link");
    mobileNavLinks.forEach((link) => {
      link.addEventListener("click", () => {
        mobileMenu.classList.remove("active");
        hamburgerToggle.setAttribute("aria-expanded", "false");
        body.style.overflow = "";
      });
    });

    // Close menu on escape key
    document.addEventListener("keydown", (e) => {
      if (e.key === "Escape" && mobileMenu.classList.contains("active")) {
        mobileMenu.classList.remove("active");
        hamburgerToggle.setAttribute("aria-expanded", "false");
        body.style.overflow = "";
      }
    });
  }

  // Initialize when DOM is loaded
  function init() {
    initHamburgerMenu();
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", init);
  } else {
    init();
  }
</script>

<style>
  .site-header {
    background-color: var(--color-surface);
    border-bottom: 2px solid var(--color-border);
    padding: calc(var(--grid-unit) * 3) 0;
    position: sticky;
    top: 0;
    z-index: 100;
  }

  .header-content {
    max-width: var(--max-width);
    margin: 0 auto;
    padding: 0 var(--content-padding);
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
    gap: calc(var(--grid-unit) * 2);
  }

  .site-title a {
    padding: calc(var(--grid-unit) / 2);
    display: flex;
    align-items: center;
    line-height: 0;
    gap: calc(var(--grid-unit) * 3);
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
  }

  .site-title h1 {
    color: var(--color-text-primary);
    margin-bottom: 0;
  }

  .header-controls {
    display: flex;
    align-items: center;
    gap: calc(var(--grid-unit) * 3);
    flex-shrink: 0;
  }

  .main-navigation {
    flex-shrink: 0;
  }

  .nav-list {
    display: flex;
    list-style: none;
    margin: 0;
    padding: 0;
    gap: calc(var(--grid-unit) * 3);
  }

  .nav-link {
    font-family: var(--font-heading-secondary);
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--color-text-primary);
    padding: calc(var(--grid-unit) / 2) calc(var(--grid-unit));
    transition: all 0.2s ease;
  }

  .nav-link.active {
    border-bottom: 2px solid var(--color-accent);
  }

  .nav-link:hover,
  .nav-link:focus,
  .site-title a:hover,
  .site-title a:focus {
    color: var(--color-text-secondary);
    text-decoration: none;
  }

  /* Desktop controls - visible by default */
  .mobile-controls {
    display: flex;
    align-items: center;
    gap: calc(var(--grid-unit) * 2);
  }

  /* Hide mobile-only hamburger by default */
  .mobile-only {
    display: none !important;
  }

  .hamburger-toggle {
    background: none;
    border: none;
    color: var(--color-text-primary);
    padding: calc(var(--grid-unit));
    cursor: pointer;
    transition: color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .hamburger-toggle:hover,
  .hamburger-toggle:focus {
    color: var(--color-accent);
    outline: none;
  }

  /* Mobile menu - hidden by default */
  .mobile-menu {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--color-background);
    z-index: 99;
    transform: translateX(-100%);
    transition: transform 0.3s ease;
    overflow-y: auto;
    padding-top: calc(var(--grid-unit) * 12);
  }

  .mobile-menu.active {
    transform: translateX(0);
  }

  .mobile-nav-list {
    list-style: none;
    margin: 0;
    padding: calc(var(--grid-unit) * 4) 0;
  }

  .mobile-nav-link {
    display: block;
    padding: calc(var(--grid-unit) * 3) calc(var(--grid-unit) * 4);
    font-family: var(--font-heading-secondary);
    font-weight: 700;
    font-size: 1.25rem;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    color: var(--color-text-primary);
    text-decoration: none;
    border-bottom: 1px solid var(--color-border);
    transition: all 0.2s ease;
  }

  .mobile-nav-link:hover,
  .mobile-nav-link:focus {
    color: var(--color-accent);
    background-color: var(--color-surface);
  }

  @media (max-width: 768px) {
    .site-header {
      padding: calc(var(--grid-unit) * 2) 0;
    }

    .header-content {
      display: grid;
      grid-template-columns: 1fr auto 1fr;
      align-items: center;
      gap: calc(var(--grid-unit) * 2);
      padding: 0 calc(var(--grid-unit) * 2);
    }

    .site-title a {
      padding: calc(var(--grid-unit) / 2);
      display: flex;
      align-items: center;
      line-height: 0;
      gap: calc(var(--grid-unit) * 3);
      border-bottom: 2px solid transparent;
    }

    .site-title img {
      height: 48px;
      width: 48px;
      background-color: var(--color-surface);
      padding: 6px;
      border: none;
    }

    .site-title h1 {
      font-size: 2rem;
    }

    /* Show mobile hamburger centered */
    .mobile-only {
      display: flex !important;
      justify-self: start;
    }

    .site-title {
      justify-self: center;
      text-align: center;
      grid-column: 2; /* Explicitly place in center column */
    }

    .site-title a {
      display: inline-block;
    }

    .header-controls {
      justify-self: end;
      gap: 0;
      grid-column: 3; /* Explicitly place in right column */
    }

    /* Hide desktop navigation on mobile */
    .main-navigation {
      display: none;
    }

    /* Show mobile controls on right */
    .mobile-controls {
      display: flex !important;
      gap: calc(var(--grid-unit) * 1.5);
    }

    .hamburger-toggle {
      padding: calc(var(--grid-unit) * 0.75);
    }
  }

  @media (max-width: 480px) {
    /* Even smaller mobile adjustments */
    .mobile-controls {
      gap: calc(var(--grid-unit)) !important;
    }
  }
</style>
